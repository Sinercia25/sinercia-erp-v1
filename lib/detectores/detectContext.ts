// üìÅ lib/detectores/detectContext.ts

import { interpretarTiempoExtendido } from '@/lib/periodos/interpretarTiempoExtendido'
import { clasificarModulo } from '@/lib/detectores/clasificarModulo'
import { detectarTemaConGPT } from '@/lib/detectores/detectarTemaGPT' // GPT fallback

/**
 * üéØ detectContext
 * Detecta el m√≥dulo m√°s probable (ventas, rrhh, etc.) en base al mensaje.
 * Usa el clasificador manual + backup con GPT si no se detecta nada.
 * Tambi√©n mantiene el m√≥dulo anterior si hay per√≠odo v√°lido y contexto activo.
 */
export async function detectContext(
  texto: string,
  userId: string,
  lastTema: string
): Promise<string> {
  const lower = texto.toLowerCase()

  // üîç Paso 1: detectar m√≥dulo manualmente
  const moduloDetectado = clasificarModulo(lower)

  // üìÖ Paso 2: detectar si hay per√≠odo (ej: "este mes", "julio")
  const periodo = interpretarTiempoExtendido(lower, userId)

  // Si hay per√≠odo y el √∫ltimo m√≥dulo era v√°lido, lo mantenemos
  const modulosValidos = [
    'ventas', 'finanzas', 'rrhh', 'cheques', 'stock',
    'clientes', 'reportes', 'compras', 'documentos',
    'afip', 'predicciones', 'soporte'
  ]

// Si el mensaje contiene un per√≠odo, y NO se detect√≥ un nuevo m√≥dulo, mantenemos el m√≥dulo anterior
if (periodo && !moduloDetectado && modulosValidos.includes(lastTema)) {
  return lastTema
}

  // ‚ö†Ô∏è Paso 3: si el clasificador no encontr√≥ nada √∫til, usamos GPT
  if (!moduloDetectado || moduloDetectado === 'general') {
    console.log('‚ö†Ô∏è Tema no reconocido por regex, intentando con GPT...')
    const temaGPT = await detectarTemaConGPT(lower)
    console.log('‚úÖ Tema detectado por GPT:', temaGPT)
    return temaGPT
  }

  // ‚úÖ En caso de detecci√≥n manual exitosa
  return moduloDetectado
}
